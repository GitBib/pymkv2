name: Tests
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: read
  checks: write
  id-token: write

jobs:
  run:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up MKVToolNix repository
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install -y wget gnupg
          sudo wget -O /usr/share/keyrings/gpg-pub-moritzbunkus.gpg https://mkvtoolnix.download/gpg-pub-moritzbunkus.gpg
          UBUNTU_CODENAME=$(lsb_release -cs)
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/gpg-pub-moritzbunkus.gpg] https://mkvtoolnix.download/ubuntu/ $UBUNTU_CODENAME main" | sudo tee /etc/apt/sources.list.d/mkvtoolnix.list
          sudo apt-get -qq update

      - name: Install MKVToolNix (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get -qq install -y mkvtoolnix mkvtoolnix-gui

      - name: Install MKVToolNix (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install --quiet  mkvtoolnix

      - name: Install MKVToolNix (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install -y --no-progress mkvtoolnix
          echo "C:\Program Files\MKVToolNix" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Verify MKVToolNix installation (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          & "C:\Program Files\MKVToolNix\mkvmerge.exe" -V
        shell: pwsh

      - name: Verify MKVToolNix installation (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: mkvmerge -V

      - name: Install uv
        id: setup-uv
        uses: astral-sh/setup-uv@v6
        with:
          version: latest
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Install project
        run: uv sync --all-extras --dev

      - name: Run tests and collect coverage
        run: uv run --frozen make
        shell: bash

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        with:
          env_vars: OS,PYTHON
          files: ./coverage.xml
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: './test-results/junit.xml'
